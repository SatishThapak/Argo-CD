name: Gitops pipeline with Argocd

on:
  push:
    branches:
      - main  # Trigger the workflow on pushes to the main branch

env:
  # Load sensitive info from GitHub Secrets
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
  ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
  ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
  GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
  GIT_USERNAME: ${{ secrets.GIT_USERNAME }}

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      - name: checkout code
        uses: actions/checkout@v3  # Checkout the repo code
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # Use personal access token for full repo access
          fetch-depth: 0  # Fetch full git history

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'  # Use Node.js version 14

      - name: Install Node.js dependencies
        run: npm install  # Install project dependencies

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ github.sha }} .  # Build Docker image tagged with commit SHA

      - name: Scan Docker Image with Trivy
        run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image ${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ github.sha }}  # Scan image for vulnerabilities

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin  # Authenticate to DockerHub

      - name: Push Docker image to DockerHub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ github.sha }}  # Push image to DockerHub

  deploy:
    needs: build  # Run deploy after build completes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Checkout repo again for deploy step
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0  # Full history for ArgoCD

      - name: Install kubectl
        run: |
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.30.7/2024-12-12/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl  # Download and install kubectl CLI

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/argocd  # Download and install ArgoCD CLI

      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure  # Authenticate to ArgoCD server
